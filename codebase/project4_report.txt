1. Basic information
Team number (e.g., 01) : 
#1 Student ID : 1477888
#1 Student Name : Jaisal Singh
#2 Student ID : 
#2 Student Name : 
#3 Student ID : 
#3 Student Name : 


2. Catalog information about Index
- Show what catalog information you store for an index. 
  For the index we first additionally create another meta table for the indexes. This causes another table to be inserted during creation. 
  The TABLES table would look something like this at the beginning. 
  _____________________________
  |TABLES|COLUMNS|INDEXES|    |
  |                           |
  |                           |
  |                           |
  |                           |
  _____________________________
  The COLUMNS table is also inserted into. So it becomes something like this, 
   _________________________________
  |TABLES COLUMNS |COLUMNS COLUMNS |
  ||INDEXES COLUMNS |              |
  |                                |
  |                                |
  |                                |
  __________________________________
  
 And finally we have the INDEXES table. 
  _________________________________
  |TABLE NAME |   ATTRIBUTE NAME   |
  |FILE NAME |                     |
  |                                |
  |                                |
  |                                |
  __________________________________
  
  We decided to store those three because it allowed us to create a unique index name based on the table and attribute it was on since there couldn't be two of the same indexes. The sizes for the columns were the same as before. 
  Whenever we would delete a table we would need to go to the INDEXES table and remove all the indexes that are associated with that table. This table helps us destroy the indexes easily and efficiently. 

3. Index Nested Loop Join
- Describe how your Index Nested Loop Join works.
  Our Index Nested Loop Join works by the description that we had in class. 
  We first find the tuple in the left relation R. We only go down the left tuple after we have scanned all the right ones. So we get the next right tuple, compare the tuple and if the condition attribute is the same then we combine the two tuples. Otherwise we keep searching the right index until we either reach a tuple that matches or we reach the end of the right index in which case we move down a left tuple and restart the right index. So, we follow the formula in class:
  foreach tuple r in R do
    foreach tuple s in S where ri == sj do 
      add <r,s> to result

4. Implementation Detail
- Have you added your own source file (.cc or .h)?

- Have you implemented any optional features? Then, describe them here.

- Other implementation details:


5. Other (optional)
- Freely use this section to tell us about things that are related to the project 4, but not related to the other sections (optional)

